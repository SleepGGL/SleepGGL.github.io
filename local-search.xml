<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Think in Java</title>
    <link href="/2020/11/19/blog04/"/>
    <url>/2020/11/19/blog04/</url>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>最近在读《Think in Java》，译本是《Java编程思想》，写一个读书笔记来记录下，仅作个人用途</p><a id="more"></a><h2 id="第二章-一切都是对象"><a href="#第二章-一切都是对象" class="headerlink" title="第二章 一切都是对象"></a>第二章 一切都是对象</h2><ul><li>java里面把一切都视作为对象，但是我们操作的标识符实际上是对象的一个<strong>引用</strong>，举个例子</li></ul><pre><code class="hljs java">String s;</code></pre><p>这里所创建的只是一个引用，并不是对象，并且引用是可以单独存在的，也就是说，你有用一个引用，并不一定需要有一个对象与他关联；</p><p>但是这样定义会产生一个运行时错误，需要初始化</p><pre><code class="hljs java">String s = <span class="hljs-string">&quot;asdf&quot;</span>;</code></pre><p>或者通过这种方式来关联一个新的对象</p><pre><code class="hljs java">String s = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;asdf&quot;</span>);</code></pre><ul><li>程序运行时，对象一般存储的位置</li></ul><ol><li><p>寄存器：这是最快的存储区</p></li><li><p>堆栈：位于通用的RAM(随机访问存储器)</p></li><li><p>堆：也位于RAM，用于存放所有的java对象，new 创建的对象就是放在这俩</p></li><li><p>常量存储：位于ROM</p></li><li><p>非RAM</p></li></ol><h3 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h3><ul><li><p>场景：一种情形是，只想为某特定域分配单一存储空间，而不去考虑究竟要创建对少个对象，甚至根本就不创建任何对象。另一种情形是，希望某个方法不与包含他的类的任何对象关联在一起。也就是说没有创建对象，也可以调用这个方法</p></li><li><p>作用：</p></li></ul><div class="note note-primary">            <p>① 为某特定域分配单一空间</p><p>② 不予任何对象关联</p>          </div>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>费马大定理和勾股数</title>
    <link href="/2020/11/19/blog03/"/>
    <url>/2020/11/19/blog03/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><div class="note note-primary">            <p>如果<script type="math/tex">a^2 + b^2 = c^2</script>，则（a, b, c）为一组勾股数，例如（3，4，5）；现在给你a，b，c其中一个数，让你找到其余的两个数；</p>          </div><a id="more"></a><h2 id="寻找勾股数"><a href="#寻找勾股数" class="headerlink" title="寻找勾股数"></a>寻找勾股数</h2><ul><li><p>它的意思是：如果一组勾股数中最小的为奇数（设为a）,令</p><script type="math/tex; mode=display">b=a*\frac{a}{2.0}-0.5</script><script type="math/tex; mode=display">c=a*\frac{a}{2.0}+0.5</script><p>则有(a,b,c)必为一组勾股数，即：<script type="math/tex">a^2+b^2=c^2</script></p></li><li><p>对于大于1的任何整数$x,(2x,x^2-1,x^2+1)$也必为一组勾股数。</p></li><li><p>证明:</p></li></ul><p><img src="/img/blog03/3-1.png" alt="3-1"></p><p>这样得到的勾股数并不一定是最小的，例如 s = 27时，代入公式得（27，364，365），但同样存在（27，36，45）的勾股数组，利用计算机可以轻松解：</p><script type="math/tex; mode=display">a^2 = (c-b)*(c+b)</script><p>必然存在:</p><script type="math/tex; mode=display">1 \leq(c-b)\leq a</script><script type="math/tex; mode=display">a \leq (c+b) \leq a^2</script><p>这里不能直接解不等式，因为还有前面等式的限制，这里是不是有点像高中的线性规划</p><script type="math/tex; mode=display">1 \leq x-y \leq a</script><script type="math/tex; mode=display">a \leq (x+y) \leq a^2</script><p>求</p><script type="math/tex; mode=display">(x-y)*(x+y)= a^2</script><p>的解,求最小的解法：</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> t,n,a,b,c;    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;t)    &#123;        <span class="hljs-keyword">while</span>(t--)        &#123;            <span class="hljs-built_in">cin</span>&gt;&gt;a;            <span class="hljs-keyword">int</span> val=a*a;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=a<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">1</span>;i--)     <span class="hljs-comment">//i相当与（c-b）这个因子</span>            &#123;                <span class="hljs-keyword">if</span>(val%i==<span class="hljs-number">0</span>)            <span class="hljs-comment">//如果i = a^2的因子</span>                &#123;                    <span class="hljs-keyword">int</span> tep=val/i;      <span class="hljs-comment">//tep是a^2的另一个因子（c+b）</span>                    <span class="hljs-keyword">if</span>((tep+i)%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)    <span class="hljs-comment">//相当于（c-b）+（c+b）= 2c,确保2c为偶数。</span>                    &#123;                        c=(tep+i)/<span class="hljs-number">2</span>;                        b=c-i;                        <span class="hljs-keyword">break</span>;                    &#125;                &#125;            &#125;            <span class="hljs-built_in">cout</span>&lt;&lt;b&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;c&lt;&lt;<span class="hljs-built_in">endl</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>这里你应该要想如果i从1开始循环呢？那么1是任何数的因子，另一个因子必为$a^2$</p><script type="math/tex; mode=display">c = \frac {a^2+1}{2}</script><script type="math/tex; mode=display">b = c - 1 = \frac{a^2-1}{2}</script><h2 id="费马大定理"><a href="#费马大定理" class="headerlink" title="费马大定理"></a>费马大定理</h2><div class="note note-primary">            <p>费马最后定理指出，若a^n+b^n=c^n ，而 n 是大于 2 的整数， (a, b, c) 即没有正整数解。</p>          </div><h2 id="HDU经典例题"><a href="#HDU经典例题" class="headerlink" title="HDU经典例题"></a>HDU经典例题</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6441">2018中国大学生程序设计竞赛 - 网络选拔赛</a></p><div class="note note-secondary">            <p>题意：<br>给你一个a、n,求出 b 和 c 使其满足 ：a^n+b^n=c^n</p>          </div><p>AC代码：</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> debug(x) cout &lt;&lt; #x &lt;&lt; <span class="hljs-meta-string">&quot;: &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> debug2(x, y) cout &lt;&lt;#x&lt;&lt;<span class="hljs-meta-string">&quot;: &quot;</span>&lt;&lt;x&lt;&lt;<span class="hljs-meta-string">&quot; | &quot;</span>&lt;&lt;#y&lt;&lt;<span class="hljs-meta-string">&quot;: &quot;</span>&lt;&lt;y&lt;&lt;endl;</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> debug3(x, y, z) cout &lt;&lt;#x&lt;&lt;<span class="hljs-meta-string">&quot;: &quot;</span>&lt;&lt;x&lt;&lt;<span class="hljs-meta-string">&quot; | &quot;</span>&lt;&lt;#y&lt;&lt;<span class="hljs-meta-string">&quot;: &quot;</span>&lt;&lt;y&lt;&lt;<span class="hljs-meta-string">&quot; | &quot;</span>&lt;&lt;#z&lt;&lt;<span class="hljs-meta-string">&quot;: &quot;</span>&lt;&lt;z&lt;&lt;endl;</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> debug4(a, b, c, d) cout &lt;&lt;#a&lt;&lt;<span class="hljs-meta-string">&quot;: &quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-meta-string">&quot; | &quot;</span>&lt;&lt;#b&lt;&lt;<span class="hljs-meta-string">&quot;: &quot;</span>&lt;&lt;b&lt;&lt;<span class="hljs-meta-string">&quot; | &quot;</span>&lt;&lt;#c&lt;&lt;<span class="hljs-meta-string">&quot;: &quot;</span>&lt;&lt;c&lt;&lt;<span class="hljs-meta-string">&quot; | &quot;</span>&lt;&lt;#d&lt;&lt;<span class="hljs-meta-string">&quot;: &quot;</span>&lt;&lt;d&lt;&lt;endl;</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fio ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);</span><span class="hljs-comment">// #define int128 __int128_t</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int128 int</span>  <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAX = <span class="hljs-number">1e4</span>+<span class="hljs-number">10</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x7f7f7f7f</span>;<span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e10</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> PI = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<span class="hljs-function">ll <span class="hljs-title">pow_mod</span><span class="hljs-params">(ll a ,ll b)</span></span><span class="hljs-function"></span>&#123;    ll ans = <span class="hljs-number">1</span> ;    ll base = a % mod;    <span class="hljs-keyword">while</span>(b&gt;<span class="hljs-number">0</span>)    &#123;          <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>!=<span class="hljs-number">0</span>)            ans = (ans *base)%mod;        base = (base*base)%mod;        b &gt;&gt;= <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">return</span> ans;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    ll T;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;T);    <span class="hljs-keyword">while</span>( T -- ) &#123;        ll n, a;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld %lld&quot;</span>, &amp;n, &amp;a);        <span class="hljs-keyword">if</span>( !n || n &gt; <span class="hljs-number">2</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1 -1\n&quot;</span>);        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( n == <span class="hljs-number">1</span> ) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1 %lld\n&quot;</span>, a + <span class="hljs-number">1</span>);        <span class="hljs-keyword">else</span> &#123;            ll b, c;            <span class="hljs-keyword">if</span>( a &amp; <span class="hljs-number">1</span> ) &#123;                b = a * a / <span class="hljs-number">2.0</span>  - <span class="hljs-number">0.5</span>;                c = a * a / <span class="hljs-number">2.0</span> + <span class="hljs-number">0.5</span>;            &#125;            <span class="hljs-keyword">else</span> &#123;                ll x = a / <span class="hljs-number">2</span>;                b = x * x - <span class="hljs-number">1</span>;                c = x * x + <span class="hljs-number">1</span>;            &#125;            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld %lld\n&quot;</span>, b, c);        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速幂</title>
    <link href="/2020/11/19/blog02/"/>
    <url>/2020/11/19/blog02/</url>
    
    <content type="html"><![CDATA[<p>简述：通过二进制来优化加速求幂的过程，让时间复杂度达到log级别，ACM里面经常会用到的一个小技巧</p><a id="more"></a><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><ul><li>算法思想:</li></ul><p>例如计算$a^b$这样一个数，我们指数b以转换二进制的形式进行分解，将其写成二进制中每一位乘上该位的权重(从右往左，第i位的权为$2^{i-1}$)</p><p>例如：$a^{13}$ = $a_2^0$+$2^2$+$2^3$ = $a_2^0$*$a_2^2$*$a_2^3$</p><ul><li>时间复杂度</li></ul><p>首先可以看到，循环的终止条件为指数e为0，且每次循环e都会右移一位，而自然数N的二进制长度为$log_2 N$，因此这个循环至多遍历$log_2 N$次。即它的时间复杂度为O($logN$)。</p><ul><li>快速幂代码</li></ul><pre><code class="hljs c++"><span class="hljs-function">ll <span class="hljs-title">pow</span><span class="hljs-params">(ll x, ll y)</span>  <span class="hljs-comment">//位运算</span></span><span class="hljs-function"></span>&#123;    ll res = <span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span>(y) &#123;        <span class="hljs-keyword">if</span> (y&amp;<span class="hljs-number">1</span>)  res *= x ;   <span class="hljs-comment">//res才是最终我们要的结果.</span>        x *= x ;     <span class="hljs-comment">// 让x的次幂以2的倍数增长</span>        y=y&gt;&gt;<span class="hljs-number">1</span>;     <span class="hljs-comment">// 对指数进行移位</span>    &#125;    <span class="hljs-keyword">return</span> res;&#125;</code></pre><ul><li>快速幂取模代码</li></ul><pre><code class="hljs c++"><span class="hljs-function">ll <span class="hljs-title">pow_mod</span><span class="hljs-params">(ll a ,ll b)</span></span><span class="hljs-function"></span>&#123;    ll ans = <span class="hljs-number">1</span> ;    ll base = a % mod;    <span class="hljs-keyword">while</span>(b&gt;<span class="hljs-number">0</span>)    &#123;          <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>!=<span class="hljs-number">0</span>)            ans = (ans *base)%mod;        base = (base*base)%mod;        b &gt;&gt;= <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">return</span> ans;&#125;</code></pre><h2 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h2><ul><li>算法思想:</li></ul><p>这里用斐波拉契数列的例题来讲解原理：<br>矩阵快速幂是用来求解递推式的，所以第一步先要列出递推式:$f(n)=f(n-1)+f(n-2)$<br>第二步是建立矩阵递推式，找到转移矩阵:</p><script type="math/tex; mode=display">\begin{pmatrix} 1 & 1 \\ 1 & 0 \end{pmatrix}*\begin{pmatrix} f_{n-1} \\ f_{n-2} \end{pmatrix} = \begin{pmatrix} f_n \\ f_{n-1} \end{pmatrix}</script><p>，简写为</p><script type="math/tex; mode=display">T*A_(n-1)=A_n</script><p>T矩阵就相当于是那个2*2的常数矩阵，而</p><script type="math/tex; mode=display">A_n=\begin{pmatrix} f_n \\ f_{n-1} \end{pmatrix}</script><p>这里就是个矩阵乘法等式左边：</p><script type="math/tex; mode=display">1*f(n-1)+1*f(n-2)=f(n)</script><script type="math/tex; mode=display">1*f(n-1)+0*f(n-2)=f(n-1)</script><p>这里还是说一下构建矩阵递推的大致套路,一般$An$与$A_{n-1}$都是按<br>照原始递推式来构建的，当然可以先猜一个 $An$ ,主要是利用矩阵乘法凑出矩阵$T$,第一行一般就是递推式，后面的行就是不需要的项就让与其的相乘系数为0。矩阵$T$就叫做转移矩阵(一定要是常数矩阵),它能把$A(n-1)$转移到$An$;然后这就是个等比数列，直接写出通项:$A_n=T^{n-1}*A_1$，此处$A1$叫初始矩阵。所以用一下矩阵快速幂然后乘上初始矩阵就能得到$An$,这里$An$就两个元素(两个位置)，根据自己设置的$An$对应位置就是对应的值，按照上面矩阵快速幂写法，$res[1][1]=f(n)$就是我们要求的。</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span>    <span class="hljs-keyword">int</span> mat[<span class="hljs-number">15</span>][<span class="hljs-number">15</span>];    <span class="hljs-comment">//定义矩阵</span>&#125;x,y;<span class="hljs-function">node <span class="hljs-title">mul</span><span class="hljs-params">(node x,node y)</span></span>&#123;    <span class="hljs-comment">//矩阵乘法</span>    node tmp;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;len;j++)&#123;            tmp.mat [i][j]=<span class="hljs-number">0</span>;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;len;k++)&#123;                tmp.mat [i][j]+=(x.mat [i][k]*y.mat [k][j])%mod;            &#125;            tmp.mat [i][j]=tmp.mat[i][j]%mod;        &#125;    &#125;    <span class="hljs-keyword">return</span> tmp;&#125;<span class="hljs-function">node <span class="hljs-title">matpow</span><span class="hljs-params">(node x,node y,<span class="hljs-keyword">int</span> num)</span></span>&#123;<span class="hljs-comment">//矩阵快速幂</span>    <span class="hljs-keyword">while</span>(num)&#123;        <span class="hljs-keyword">if</span>(num&amp;<span class="hljs-number">1</span>)&#123;            y=mul(y,x);        &#125;        x=mul(x,x);        num=num&gt;&gt;<span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">return</span> y;&#125;</code></pre><ul><li>如何构造矩阵</li></ul><p><img src="/img/blog02/2-1.png" alt="2-1"></p>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在GitHub上搭建个人博客</title>
    <link href="/2020/11/18/blog01/"/>
    <url>/2020/11/18/blog01/</url>
    
    <content type="html"><![CDATA[<p>用hexo快速搭建一个高效的博客，并通过github发布到公网上，环境配置：node.js + hexo + git + github</p><a id="more"></a><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><blockquote><p>环境配置：node.js + hexo + git + github</p></blockquote><h2 id="添加-GitHub-SSH-Key"><a href="#添加-GitHub-SSH-Key" class="headerlink" title="添加 GitHub SSH Key"></a><a id="jump">添加 GitHub SSH Key</a></h2><ul><li>进入 git bash 界面输入一下命令生成一个ssh key，第一次询问直接回车就行了，他会在 <strong>C:\Users\Lucifer.ssh</strong> 目录下生成两个文件，我们用记事本打开<strong>id_rsa.pub</strong></li></ul><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;github的注册邮箱&quot;</span> <span class="hljs-comment">#此处有双引号</span></code></pre><p><img src="/img/blog01/1-1.png" alt="1-1"></p><ul><li>在github首页，找到settings选项，再选择SSH and GPG Key，接着new SSH Key</li></ul><p><img src="/img/blog01/1-2.png" alt="1-2"></p><ul><li>然后将<strong>id_rsa.pub</strong> 文件里面的内容黏贴到key处，Title根据自己喜好取名</li></ul><p><img src="/img/blog01/1-3.png" alt="1-3"></p><h2 id="创建-GitHub-Page-仓库"><a href="#创建-GitHub-Page-仓库" class="headerlink" title="创建 GitHub Page 仓库"></a>创建 GitHub Page 仓库</h2><ul><li>首先进入github首页点击Start a Project</li></ul><p><img src="/img/blog01/1-4.png" alt="1-4"></p><ul><li>需要注意这里代码仓库的名称必须要有<strong>.github.io</strong>的后缀，并且后缀前面的名称也必须和你gihub的username相同（注意不是昵称），之后我们访问博客都是通过这个URL（也可以做域名解析）</li></ul><p><img src="/img/blog01/1-5.png" alt="1-5"></p><ul><li>到此代码仓库也创建好了</li></ul><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p> hexo 实际上是一个高效搭建博客的工具，我们需要做的就是利用hexo来搭建我们的博客然后部署到github page上去，以便别人通过公网来访问我们的博客。</p><ul><li>安装hexo之前我们需要先安装 <a href="https://nodejs.org/zh-cn/">node.js</a>，安装的话直接下一步就行了</li></ul><p><img src="/img/blog01/1-6.png" alt="1-6"></p><ul><li><p>安装 <a href="https://git-scm.com/downloads">git</a> (不了解 git 的戳我)</p></li><li><p>现在开始进入正题安装 hexo，进入git bash界面安装hexo环境，如果出现版本号的话就是安装成功了</p></li></ul><pre><code class="hljs bash">npm install hexo-cli -g</code></pre><p><img src="/img/blog01/1-7.png" alt="1-7"></p><ul><li>创建一个文件夹来存放我们的博客，并且在这个文件下里面打开git bash(或者cmd)运行一下命令来进行初始化，执行成功会在BlogName夹下生成一堆文件，之后我们配置博客都在里面进行</li></ul><pre><code class="hljs bash">npm init [BlogName] <span class="hljs-comment">#BlogBame按照自己喜好取名</span></code></pre><ul><li>接下来进入到BlogName里面再运行一下命令来进一步部署</li></ul><pre><code class="hljs bash">npm installnpm install hexo-deployer-git --save <span class="hljs-comment">#相当于安装一个插件</span></code></pre><ul><li>打开 hexo 服务通过本地测试访问一下，如果出现一下页面就是部署成功了，默认页面的文件在 <strong>BlogName/source/_posts/hello-world.md</strong></li></ul><pre><code class="hljs bash">hexo s -p 4444 <span class="hljs-comment">#-p指定端口,也可以不加默认使用4000端口</span></code></pre><p><img src="/img/blog01/1-8.png" alt="1-8"></p><ul><li>我们新写的博客只要放在 <strong>BlogName/source/_posts</strong> ，然后通过以下命令提交到<br>github上，别人就可以看到我们写的博客了</li></ul><pre><code class="hljs bash">hexo g -d</code></pre><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><h3 id="错误1"><a href="#错误1" class="headerlink" title="错误1"></a>错误1</h3><blockquote><p>On branch master nothing to commit, working tree clean</p></blockquote><ul><li>错误分析：</li><li>说这个之前，先说一下Git的几个区：  <ul><li>工作区：也就是本地文件的区域</li><li>版本库中暂存区：就是使用git add命令之后，本地工作区的文件加到暂存区</li><li>版本库当前分支：也就是使用 git commit 之后，暂存区的东西到版本库当前分支。<br>而这里出现这个错误的原因就是：暂存区没东西或者东西都提交到版本库当前分支。且工作区中的文件都被git跟踪了（即为都git add了）<a href="https://jingyan.baidu.com/article/49ad8bce2cb8eb1835d8fa4e.html">参考连接</a></li></ul></li></ul><p><img src="/img/blog01/1-9.png" alt="1-9"></p><ul><li>解决方法：hexo 的提交命令使用</li></ul><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></pre><ul><li>总结：每次在执行 <strong>hexo g -d</strong> 命令之前先执行一下 <strong>hexo clean</strong> 命令</li></ul><h3 id="错误2"><a href="#错误2" class="headerlink" title="错误2"></a>错误2</h3><blockquote><p>fatal: Could not read from remote repository. Please make sure you have the correct access rights</p></blockquote><ul><li>错误分析：你的SSH key没有添加到github帐号设置中</li><li>解决方法：执行本文<a href="#jump"><strong>添加 GitHub SSH Key</strong></a>处的内容</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
